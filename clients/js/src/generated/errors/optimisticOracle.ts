/**
 * This code was AUTOGENERATED using the kinobi library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun kinobi to update it.
 *
 * @see https://github.com/metaplex-foundation/kinobi
 */

import type { Program } from "@metaplex-foundation/umi";

import { ProgramError } from "@metaplex-foundation/umi";

type ProgramErrorConstructor = new (program: Program, cause?: Error) => ProgramError;
const codeToErrorMap = new Map<number, ProgramErrorConstructor>();
const nameToErrorMap = new Map<string, ProgramErrorConstructor>();

/** ArithmeticOverflow: Program arithmetic overflowed */
export class ArithmeticOverflowError extends ProgramError {
  override readonly name: string = "ArithmeticOverflow";

  readonly code: number = 0x0; // 0

  constructor(program: Program, cause?: Error) {
    super("Program arithmetic overflowed", program, cause);
  }
}
codeToErrorMap.set(0x0, ArithmeticOverflowError);
nameToErrorMap.set("ArithmeticOverflow", ArithmeticOverflowError);

/** AlreadyAsserted: Request already has an assertion */
export class AlreadyAssertedError extends ProgramError {
  override readonly name: string = "AlreadyAsserted";

  readonly code: number = 0x1; // 1

  constructor(program: Program, cause?: Error) {
    super("Request already has an assertion", program, cause);
  }
}
codeToErrorMap.set(0x1, AlreadyAssertedError);
nameToErrorMap.set("AlreadyAsserted", AlreadyAssertedError);

/** InsufficientBond: Insufficient bond */
export class InsufficientBondError extends ProgramError {
  override readonly name: string = "InsufficientBond";

  readonly code: number = 0x2; // 2

  constructor(program: Program, cause?: Error) {
    super("Insufficient bond", program, cause);
  }
}
codeToErrorMap.set(0x2, InsufficientBondError);
nameToErrorMap.set("InsufficientBond", InsufficientBondError);

/**
 * Attempts to resolve a custom program error from the provided error code.
 * @category Errors
 */
export function getOptimisticOracleErrorFromCode(
  code: number,
  program: Program,
  cause?: Error,
): ProgramError | null {
  const constructor = codeToErrorMap.get(code);
  return constructor ? new constructor(program, cause) : null;
}

/**
 * Attempts to resolve a custom program error from the provided error name, i.e. 'Unauthorized'.
 * @category Errors
 */
export function getOptimisticOracleErrorFromName(
  name: string,
  program: Program,
  cause?: Error,
): ProgramError | null {
  const constructor = nameToErrorMap.get(name);
  return constructor ? new constructor(program, cause) : null;
}

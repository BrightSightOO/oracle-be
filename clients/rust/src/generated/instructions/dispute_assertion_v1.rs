//! This code was AUTOGENERATED using the kinobi library.
//! Please DO NOT EDIT THIS FILE, instead use visitors
//! to add features, then rerun kinobi to update it.
//!
//! [https://github.com/metaplex-foundation/kinobi]
//!

use borsh::{BorshDeserialize, BorshSerialize};

/// Accounts.
pub struct DisputeAssertionV1 {
    /// Config
    pub config: solana_program::pubkey::Pubkey,
    /// Request
    pub request: solana_program::pubkey::Pubkey,
    /// Assertion
    pub assertion: solana_program::pubkey::Pubkey,
    /// Voting
    pub voting: solana_program::pubkey::Pubkey,
    /// Bond mint
    pub bond_mint: solana_program::pubkey::Pubkey,
    /// Bond source token account
    pub bond_source: solana_program::pubkey::Pubkey,
    /// Bond escrow token account
    pub bond_escrow: solana_program::pubkey::Pubkey,
    /// Disputer
    pub disputer: solana_program::pubkey::Pubkey,
    /// Payer
    pub payer: solana_program::pubkey::Pubkey,
    /// SPL token program
    pub token_program: solana_program::pubkey::Pubkey,
    /// System program
    pub system_program: solana_program::pubkey::Pubkey,
}

impl DisputeAssertionV1 {
    pub fn instruction(&self) -> solana_program::instruction::Instruction {
        self.instruction_with_remaining_accounts(&[])
    }
    #[allow(clippy::vec_init_then_push)]
    pub fn instruction_with_remaining_accounts(
        &self,
        remaining_accounts: &[solana_program::instruction::AccountMeta],
    ) -> solana_program::instruction::Instruction {
        let mut accounts = Vec::with_capacity(11 + remaining_accounts.len());
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(self.config, false));
        accounts.push(solana_program::instruction::AccountMeta::new(self.request, false));
        accounts.push(solana_program::instruction::AccountMeta::new(self.assertion, false));
        accounts.push(solana_program::instruction::AccountMeta::new(self.voting, false));
        accounts
            .push(solana_program::instruction::AccountMeta::new_readonly(self.bond_mint, false));
        accounts.push(solana_program::instruction::AccountMeta::new(self.bond_source, false));
        accounts.push(solana_program::instruction::AccountMeta::new(self.bond_escrow, false));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(self.disputer, true));
        accounts.push(solana_program::instruction::AccountMeta::new(self.payer, true));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            self.token_program,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            self.system_program,
            false,
        ));
        accounts.extend_from_slice(remaining_accounts);
        let data = DisputeAssertionV1InstructionData::new().try_to_vec().unwrap();

        solana_program::instruction::Instruction {
            program_id: crate::OPTIMISTIC_ORACLE_ID,
            accounts,
            data,
        }
    }
}

#[derive(BorshDeserialize, BorshSerialize)]
pub struct DisputeAssertionV1InstructionData {
    discriminator: u8,
}

impl DisputeAssertionV1InstructionData {
    pub fn new() -> Self {
        Self { discriminator: 9 }
    }
}

/// Instruction builder for `DisputeAssertionV1`.
///
/// ### Accounts:
///
///   0. `[]` config
///   1. `[writable]` request
///   2. `[writable]` assertion
///   3. `[writable]` voting
///   4. `[]` bond_mint
///   5. `[writable]` bond_source
///   6. `[writable]` bond_escrow
///   7. `[signer]` disputer
///   8. `[writable, signer]` payer
///   9. `[optional]` token_program (default to `TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA`)
///   10. `[optional]` system_program (default to `11111111111111111111111111111111`)
#[derive(Clone, Debug, Default)]
pub struct DisputeAssertionV1Builder {
    config: Option<solana_program::pubkey::Pubkey>,
    request: Option<solana_program::pubkey::Pubkey>,
    assertion: Option<solana_program::pubkey::Pubkey>,
    voting: Option<solana_program::pubkey::Pubkey>,
    bond_mint: Option<solana_program::pubkey::Pubkey>,
    bond_source: Option<solana_program::pubkey::Pubkey>,
    bond_escrow: Option<solana_program::pubkey::Pubkey>,
    disputer: Option<solana_program::pubkey::Pubkey>,
    payer: Option<solana_program::pubkey::Pubkey>,
    token_program: Option<solana_program::pubkey::Pubkey>,
    system_program: Option<solana_program::pubkey::Pubkey>,
    __remaining_accounts: Vec<solana_program::instruction::AccountMeta>,
}

impl DisputeAssertionV1Builder {
    pub fn new() -> Self {
        Self::default()
    }
    /// Config
    #[inline(always)]
    pub fn config(&mut self, config: solana_program::pubkey::Pubkey) -> &mut Self {
        self.config = Some(config);
        self
    }
    /// Request
    #[inline(always)]
    pub fn request(&mut self, request: solana_program::pubkey::Pubkey) -> &mut Self {
        self.request = Some(request);
        self
    }
    /// Assertion
    #[inline(always)]
    pub fn assertion(&mut self, assertion: solana_program::pubkey::Pubkey) -> &mut Self {
        self.assertion = Some(assertion);
        self
    }
    /// Voting
    #[inline(always)]
    pub fn voting(&mut self, voting: solana_program::pubkey::Pubkey) -> &mut Self {
        self.voting = Some(voting);
        self
    }
    /// Bond mint
    #[inline(always)]
    pub fn bond_mint(&mut self, bond_mint: solana_program::pubkey::Pubkey) -> &mut Self {
        self.bond_mint = Some(bond_mint);
        self
    }
    /// Bond source token account
    #[inline(always)]
    pub fn bond_source(&mut self, bond_source: solana_program::pubkey::Pubkey) -> &mut Self {
        self.bond_source = Some(bond_source);
        self
    }
    /// Bond escrow token account
    #[inline(always)]
    pub fn bond_escrow(&mut self, bond_escrow: solana_program::pubkey::Pubkey) -> &mut Self {
        self.bond_escrow = Some(bond_escrow);
        self
    }
    /// Disputer
    #[inline(always)]
    pub fn disputer(&mut self, disputer: solana_program::pubkey::Pubkey) -> &mut Self {
        self.disputer = Some(disputer);
        self
    }
    /// Payer
    #[inline(always)]
    pub fn payer(&mut self, payer: solana_program::pubkey::Pubkey) -> &mut Self {
        self.payer = Some(payer);
        self
    }
    /// `[optional account, default to 'TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA']`
    /// SPL token program
    #[inline(always)]
    pub fn token_program(&mut self, token_program: solana_program::pubkey::Pubkey) -> &mut Self {
        self.token_program = Some(token_program);
        self
    }
    /// `[optional account, default to '11111111111111111111111111111111']`
    /// System program
    #[inline(always)]
    pub fn system_program(&mut self, system_program: solana_program::pubkey::Pubkey) -> &mut Self {
        self.system_program = Some(system_program);
        self
    }
    /// Add an aditional account to the instruction.
    #[inline(always)]
    pub fn add_remaining_account(
        &mut self,
        account: solana_program::instruction::AccountMeta,
    ) -> &mut Self {
        self.__remaining_accounts.push(account);
        self
    }
    /// Add additional accounts to the instruction.
    #[inline(always)]
    pub fn add_remaining_accounts(
        &mut self,
        accounts: &[solana_program::instruction::AccountMeta],
    ) -> &mut Self {
        self.__remaining_accounts.extend_from_slice(accounts);
        self
    }
    #[allow(clippy::clone_on_copy)]
    pub fn instruction(&self) -> solana_program::instruction::Instruction {
        let accounts = DisputeAssertionV1 {
            config: self.config.expect("config is not set"),
            request: self.request.expect("request is not set"),
            assertion: self.assertion.expect("assertion is not set"),
            voting: self.voting.expect("voting is not set"),
            bond_mint: self.bond_mint.expect("bond_mint is not set"),
            bond_source: self.bond_source.expect("bond_source is not set"),
            bond_escrow: self.bond_escrow.expect("bond_escrow is not set"),
            disputer: self.disputer.expect("disputer is not set"),
            payer: self.payer.expect("payer is not set"),
            token_program: self
                .token_program
                .unwrap_or(solana_program::pubkey!("TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA")),
            system_program: self
                .system_program
                .unwrap_or(solana_program::pubkey!("11111111111111111111111111111111")),
        };

        accounts.instruction_with_remaining_accounts(&self.__remaining_accounts)
    }
}

/// `dispute_assertion_v1` CPI accounts.
pub struct DisputeAssertionV1CpiAccounts<'a, 'b> {
    /// Config
    pub config: &'b solana_program::account_info::AccountInfo<'a>,
    /// Request
    pub request: &'b solana_program::account_info::AccountInfo<'a>,
    /// Assertion
    pub assertion: &'b solana_program::account_info::AccountInfo<'a>,
    /// Voting
    pub voting: &'b solana_program::account_info::AccountInfo<'a>,
    /// Bond mint
    pub bond_mint: &'b solana_program::account_info::AccountInfo<'a>,
    /// Bond source token account
    pub bond_source: &'b solana_program::account_info::AccountInfo<'a>,
    /// Bond escrow token account
    pub bond_escrow: &'b solana_program::account_info::AccountInfo<'a>,
    /// Disputer
    pub disputer: &'b solana_program::account_info::AccountInfo<'a>,
    /// Payer
    pub payer: &'b solana_program::account_info::AccountInfo<'a>,
    /// SPL token program
    pub token_program: &'b solana_program::account_info::AccountInfo<'a>,
    /// System program
    pub system_program: &'b solana_program::account_info::AccountInfo<'a>,
}

/// `dispute_assertion_v1` CPI instruction.
pub struct DisputeAssertionV1Cpi<'a, 'b> {
    /// The program to invoke.
    pub __program: &'b solana_program::account_info::AccountInfo<'a>,
    /// Config
    pub config: &'b solana_program::account_info::AccountInfo<'a>,
    /// Request
    pub request: &'b solana_program::account_info::AccountInfo<'a>,
    /// Assertion
    pub assertion: &'b solana_program::account_info::AccountInfo<'a>,
    /// Voting
    pub voting: &'b solana_program::account_info::AccountInfo<'a>,
    /// Bond mint
    pub bond_mint: &'b solana_program::account_info::AccountInfo<'a>,
    /// Bond source token account
    pub bond_source: &'b solana_program::account_info::AccountInfo<'a>,
    /// Bond escrow token account
    pub bond_escrow: &'b solana_program::account_info::AccountInfo<'a>,
    /// Disputer
    pub disputer: &'b solana_program::account_info::AccountInfo<'a>,
    /// Payer
    pub payer: &'b solana_program::account_info::AccountInfo<'a>,
    /// SPL token program
    pub token_program: &'b solana_program::account_info::AccountInfo<'a>,
    /// System program
    pub system_program: &'b solana_program::account_info::AccountInfo<'a>,
}

impl<'a, 'b> DisputeAssertionV1Cpi<'a, 'b> {
    pub fn new(
        program: &'b solana_program::account_info::AccountInfo<'a>,
        accounts: DisputeAssertionV1CpiAccounts<'a, 'b>,
    ) -> Self {
        Self {
            __program: program,
            config: accounts.config,
            request: accounts.request,
            assertion: accounts.assertion,
            voting: accounts.voting,
            bond_mint: accounts.bond_mint,
            bond_source: accounts.bond_source,
            bond_escrow: accounts.bond_escrow,
            disputer: accounts.disputer,
            payer: accounts.payer,
            token_program: accounts.token_program,
            system_program: accounts.system_program,
        }
    }
    #[inline(always)]
    pub fn invoke(&self) -> solana_program::entrypoint::ProgramResult {
        self.invoke_signed_with_remaining_accounts(&[], &[])
    }
    #[inline(always)]
    pub fn invoke_with_remaining_accounts(
        &self,
        remaining_accounts: &[(&'b solana_program::account_info::AccountInfo<'a>, bool, bool)],
    ) -> solana_program::entrypoint::ProgramResult {
        self.invoke_signed_with_remaining_accounts(&[], remaining_accounts)
    }
    #[inline(always)]
    pub fn invoke_signed(
        &self,
        signers_seeds: &[&[&[u8]]],
    ) -> solana_program::entrypoint::ProgramResult {
        self.invoke_signed_with_remaining_accounts(signers_seeds, &[])
    }
    #[allow(clippy::clone_on_copy)]
    #[allow(clippy::vec_init_then_push)]
    pub fn invoke_signed_with_remaining_accounts(
        &self,
        signers_seeds: &[&[&[u8]]],
        remaining_accounts: &[(&'b solana_program::account_info::AccountInfo<'a>, bool, bool)],
    ) -> solana_program::entrypoint::ProgramResult {
        let mut accounts = Vec::with_capacity(11 + remaining_accounts.len());
        accounts
            .push(solana_program::instruction::AccountMeta::new_readonly(*self.config.key, false));
        accounts.push(solana_program::instruction::AccountMeta::new(*self.request.key, false));
        accounts.push(solana_program::instruction::AccountMeta::new(*self.assertion.key, false));
        accounts.push(solana_program::instruction::AccountMeta::new(*self.voting.key, false));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            *self.bond_mint.key,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new(*self.bond_source.key, false));
        accounts.push(solana_program::instruction::AccountMeta::new(*self.bond_escrow.key, false));
        accounts
            .push(solana_program::instruction::AccountMeta::new_readonly(*self.disputer.key, true));
        accounts.push(solana_program::instruction::AccountMeta::new(*self.payer.key, true));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            *self.token_program.key,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            *self.system_program.key,
            false,
        ));
        remaining_accounts.iter().for_each(|remaining_account| {
            accounts.push(solana_program::instruction::AccountMeta {
                pubkey: *remaining_account.0.key,
                is_signer: remaining_account.1,
                is_writable: remaining_account.2,
            })
        });
        let data = DisputeAssertionV1InstructionData::new().try_to_vec().unwrap();

        let instruction = solana_program::instruction::Instruction {
            program_id: crate::OPTIMISTIC_ORACLE_ID,
            accounts,
            data,
        };
        let mut account_infos = Vec::with_capacity(11 + 1 + remaining_accounts.len());
        account_infos.push(self.__program.clone());
        account_infos.push(self.config.clone());
        account_infos.push(self.request.clone());
        account_infos.push(self.assertion.clone());
        account_infos.push(self.voting.clone());
        account_infos.push(self.bond_mint.clone());
        account_infos.push(self.bond_source.clone());
        account_infos.push(self.bond_escrow.clone());
        account_infos.push(self.disputer.clone());
        account_infos.push(self.payer.clone());
        account_infos.push(self.token_program.clone());
        account_infos.push(self.system_program.clone());
        remaining_accounts
            .iter()
            .for_each(|remaining_account| account_infos.push(remaining_account.0.clone()));

        if signers_seeds.is_empty() {
            solana_program::program::invoke(&instruction, &account_infos)
        } else {
            solana_program::program::invoke_signed(&instruction, &account_infos, signers_seeds)
        }
    }
}

/// Instruction builder for `DisputeAssertionV1` via CPI.
///
/// ### Accounts:
///
///   0. `[]` config
///   1. `[writable]` request
///   2. `[writable]` assertion
///   3. `[writable]` voting
///   4. `[]` bond_mint
///   5. `[writable]` bond_source
///   6. `[writable]` bond_escrow
///   7. `[signer]` disputer
///   8. `[writable, signer]` payer
///   9. `[]` token_program
///   10. `[]` system_program
#[derive(Clone, Debug)]
pub struct DisputeAssertionV1CpiBuilder<'a, 'b> {
    instruction: Box<DisputeAssertionV1CpiBuilderInstruction<'a, 'b>>,
}

impl<'a, 'b> DisputeAssertionV1CpiBuilder<'a, 'b> {
    pub fn new(program: &'b solana_program::account_info::AccountInfo<'a>) -> Self {
        let instruction = Box::new(DisputeAssertionV1CpiBuilderInstruction {
            __program: program,
            config: None,
            request: None,
            assertion: None,
            voting: None,
            bond_mint: None,
            bond_source: None,
            bond_escrow: None,
            disputer: None,
            payer: None,
            token_program: None,
            system_program: None,
            __remaining_accounts: Vec::new(),
        });
        Self { instruction }
    }
    /// Config
    #[inline(always)]
    pub fn config(
        &mut self,
        config: &'b solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.config = Some(config);
        self
    }
    /// Request
    #[inline(always)]
    pub fn request(
        &mut self,
        request: &'b solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.request = Some(request);
        self
    }
    /// Assertion
    #[inline(always)]
    pub fn assertion(
        &mut self,
        assertion: &'b solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.assertion = Some(assertion);
        self
    }
    /// Voting
    #[inline(always)]
    pub fn voting(
        &mut self,
        voting: &'b solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.voting = Some(voting);
        self
    }
    /// Bond mint
    #[inline(always)]
    pub fn bond_mint(
        &mut self,
        bond_mint: &'b solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.bond_mint = Some(bond_mint);
        self
    }
    /// Bond source token account
    #[inline(always)]
    pub fn bond_source(
        &mut self,
        bond_source: &'b solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.bond_source = Some(bond_source);
        self
    }
    /// Bond escrow token account
    #[inline(always)]
    pub fn bond_escrow(
        &mut self,
        bond_escrow: &'b solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.bond_escrow = Some(bond_escrow);
        self
    }
    /// Disputer
    #[inline(always)]
    pub fn disputer(
        &mut self,
        disputer: &'b solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.disputer = Some(disputer);
        self
    }
    /// Payer
    #[inline(always)]
    pub fn payer(&mut self, payer: &'b solana_program::account_info::AccountInfo<'a>) -> &mut Self {
        self.instruction.payer = Some(payer);
        self
    }
    /// SPL token program
    #[inline(always)]
    pub fn token_program(
        &mut self,
        token_program: &'b solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.token_program = Some(token_program);
        self
    }
    /// System program
    #[inline(always)]
    pub fn system_program(
        &mut self,
        system_program: &'b solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.system_program = Some(system_program);
        self
    }
    /// Add an additional account to the instruction.
    #[inline(always)]
    pub fn add_remaining_account(
        &mut self,
        account: &'b solana_program::account_info::AccountInfo<'a>,
        is_writable: bool,
        is_signer: bool,
    ) -> &mut Self {
        self.instruction.__remaining_accounts.push((account, is_writable, is_signer));
        self
    }
    /// Add additional accounts to the instruction.
    ///
    /// Each account is represented by a tuple of the `AccountInfo`, a `bool` indicating whether the account is writable or not,
    /// and a `bool` indicating whether the account is a signer or not.
    #[inline(always)]
    pub fn add_remaining_accounts(
        &mut self,
        accounts: &[(&'b solana_program::account_info::AccountInfo<'a>, bool, bool)],
    ) -> &mut Self {
        self.instruction.__remaining_accounts.extend_from_slice(accounts);
        self
    }
    #[inline(always)]
    pub fn invoke(&self) -> solana_program::entrypoint::ProgramResult {
        self.invoke_signed(&[])
    }
    #[allow(clippy::clone_on_copy)]
    #[allow(clippy::vec_init_then_push)]
    pub fn invoke_signed(
        &self,
        signers_seeds: &[&[&[u8]]],
    ) -> solana_program::entrypoint::ProgramResult {
        let instruction = DisputeAssertionV1Cpi {
            __program: self.instruction.__program,

            config: self.instruction.config.expect("config is not set"),

            request: self.instruction.request.expect("request is not set"),

            assertion: self.instruction.assertion.expect("assertion is not set"),

            voting: self.instruction.voting.expect("voting is not set"),

            bond_mint: self.instruction.bond_mint.expect("bond_mint is not set"),

            bond_source: self.instruction.bond_source.expect("bond_source is not set"),

            bond_escrow: self.instruction.bond_escrow.expect("bond_escrow is not set"),

            disputer: self.instruction.disputer.expect("disputer is not set"),

            payer: self.instruction.payer.expect("payer is not set"),

            token_program: self.instruction.token_program.expect("token_program is not set"),

            system_program: self.instruction.system_program.expect("system_program is not set"),
        };
        instruction.invoke_signed_with_remaining_accounts(
            signers_seeds,
            &self.instruction.__remaining_accounts,
        )
    }
}

#[derive(Clone, Debug)]
struct DisputeAssertionV1CpiBuilderInstruction<'a, 'b> {
    __program: &'b solana_program::account_info::AccountInfo<'a>,
    config: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    request: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    assertion: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    voting: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    bond_mint: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    bond_source: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    bond_escrow: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    disputer: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    payer: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    token_program: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    system_program: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    /// Additional instruction accounts `(AccountInfo, is_writable, is_signer)`.
    __remaining_accounts: Vec<(&'b solana_program::account_info::AccountInfo<'a>, bool, bool)>,
}

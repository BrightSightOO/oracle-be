//! This code was AUTOGENERATED using the kinobi library.
//! Please DO NOT EDIT THIS FILE, instead use visitors
//! to add features, then rerun kinobi to update it.
//!
//! <https://github.com/kinobi-so/kinobi>
//!

use crate::generated::types::Bounds;
use borsh::{BorshDeserialize, BorshSerialize};

/// Accounts.
pub struct UpdateCurrencyV1 {
    /// Config
    pub config: solana_program::pubkey::Pubkey,
    /// Currency
    pub currency: solana_program::pubkey::Pubkey,
    /// Oracle authority
    pub authority: solana_program::pubkey::Pubkey,
}

impl UpdateCurrencyV1 {
    pub fn instruction(
        &self,
        args: UpdateCurrencyV1InstructionArgs,
    ) -> solana_program::instruction::Instruction {
        self.instruction_with_remaining_accounts(args, &[])
    }
    #[allow(clippy::vec_init_then_push)]
    pub fn instruction_with_remaining_accounts(
        &self,
        args: UpdateCurrencyV1InstructionArgs,
        remaining_accounts: &[solana_program::instruction::AccountMeta],
    ) -> solana_program::instruction::Instruction {
        let mut accounts = Vec::with_capacity(3 + remaining_accounts.len());
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(self.config, false));
        accounts.push(solana_program::instruction::AccountMeta::new(self.currency, false));
        accounts
            .push(solana_program::instruction::AccountMeta::new_readonly(self.authority, false));
        accounts.extend_from_slice(remaining_accounts);
        let mut data = UpdateCurrencyV1InstructionData::new().try_to_vec().unwrap();
        let mut args = args.try_to_vec().unwrap();
        data.append(&mut args);

        solana_program::instruction::Instruction {
            program_id: crate::OPTIMISTIC_ORACLE_ID,
            accounts,
            data,
        }
    }
}

#[derive(BorshDeserialize, BorshSerialize)]
pub struct UpdateCurrencyV1InstructionData {
    discriminator: u8,
}

impl UpdateCurrencyV1InstructionData {
    pub fn new() -> Self {
        Self { discriminator: 5 }
    }
}

impl Default for UpdateCurrencyV1InstructionData {
    fn default() -> Self {
        Self::new()
    }
}

#[derive(BorshSerialize, BorshDeserialize, Clone, Debug, Eq, PartialEq)]
#[cfg_attr(feature = "serde", derive(serde::Serialize, serde::Deserialize))]
pub struct UpdateCurrencyV1InstructionArgs {
    pub new_reward_range: Bounds,
    pub new_bond_range: Bounds,
}

/// Instruction builder for `UpdateCurrencyV1`.
///
/// ### Accounts:
///
///   0. `[]` config
///   1. `[writable]` currency
///   2. `[]` authority
#[derive(Clone, Debug, Default)]
pub struct UpdateCurrencyV1Builder {
    config: Option<solana_program::pubkey::Pubkey>,
    currency: Option<solana_program::pubkey::Pubkey>,
    authority: Option<solana_program::pubkey::Pubkey>,
    new_reward_range: Option<Bounds>,
    new_bond_range: Option<Bounds>,
    __remaining_accounts: Vec<solana_program::instruction::AccountMeta>,
}

impl UpdateCurrencyV1Builder {
    pub fn new() -> Self {
        Self::default()
    }
    /// Config
    #[inline(always)]
    pub fn config(&mut self, config: solana_program::pubkey::Pubkey) -> &mut Self {
        self.config = Some(config);
        self
    }
    /// Currency
    #[inline(always)]
    pub fn currency(&mut self, currency: solana_program::pubkey::Pubkey) -> &mut Self {
        self.currency = Some(currency);
        self
    }
    /// Oracle authority
    #[inline(always)]
    pub fn authority(&mut self, authority: solana_program::pubkey::Pubkey) -> &mut Self {
        self.authority = Some(authority);
        self
    }
    #[inline(always)]
    pub fn new_reward_range(&mut self, new_reward_range: Bounds) -> &mut Self {
        self.new_reward_range = Some(new_reward_range);
        self
    }
    #[inline(always)]
    pub fn new_bond_range(&mut self, new_bond_range: Bounds) -> &mut Self {
        self.new_bond_range = Some(new_bond_range);
        self
    }
    /// Add an aditional account to the instruction.
    #[inline(always)]
    pub fn add_remaining_account(
        &mut self,
        account: solana_program::instruction::AccountMeta,
    ) -> &mut Self {
        self.__remaining_accounts.push(account);
        self
    }
    /// Add additional accounts to the instruction.
    #[inline(always)]
    pub fn add_remaining_accounts(
        &mut self,
        accounts: &[solana_program::instruction::AccountMeta],
    ) -> &mut Self {
        self.__remaining_accounts.extend_from_slice(accounts);
        self
    }
    #[allow(clippy::clone_on_copy)]
    pub fn instruction(&self) -> solana_program::instruction::Instruction {
        let accounts = UpdateCurrencyV1 {
            config: self.config.expect("config is not set"),
            currency: self.currency.expect("currency is not set"),
            authority: self.authority.expect("authority is not set"),
        };
        let args = UpdateCurrencyV1InstructionArgs {
            new_reward_range: self.new_reward_range.clone().expect("new_reward_range is not set"),
            new_bond_range: self.new_bond_range.clone().expect("new_bond_range is not set"),
        };

        accounts.instruction_with_remaining_accounts(args, &self.__remaining_accounts)
    }
}

/// `update_currency_v1` CPI accounts.
pub struct UpdateCurrencyV1CpiAccounts<'a, 'b> {
    /// Config
    pub config: &'b solana_program::account_info::AccountInfo<'a>,
    /// Currency
    pub currency: &'b solana_program::account_info::AccountInfo<'a>,
    /// Oracle authority
    pub authority: &'b solana_program::account_info::AccountInfo<'a>,
}

/// `update_currency_v1` CPI instruction.
pub struct UpdateCurrencyV1Cpi<'a, 'b> {
    /// The program to invoke.
    pub __program: &'b solana_program::account_info::AccountInfo<'a>,
    /// Config
    pub config: &'b solana_program::account_info::AccountInfo<'a>,
    /// Currency
    pub currency: &'b solana_program::account_info::AccountInfo<'a>,
    /// Oracle authority
    pub authority: &'b solana_program::account_info::AccountInfo<'a>,
    /// The arguments for the instruction.
    pub __args: UpdateCurrencyV1InstructionArgs,
}

impl<'a, 'b> UpdateCurrencyV1Cpi<'a, 'b> {
    pub fn new(
        program: &'b solana_program::account_info::AccountInfo<'a>,
        accounts: UpdateCurrencyV1CpiAccounts<'a, 'b>,
        args: UpdateCurrencyV1InstructionArgs,
    ) -> Self {
        Self {
            __program: program,
            config: accounts.config,
            currency: accounts.currency,
            authority: accounts.authority,
            __args: args,
        }
    }
    #[inline(always)]
    pub fn invoke(&self) -> solana_program::entrypoint::ProgramResult {
        self.invoke_signed_with_remaining_accounts(&[], &[])
    }
    #[inline(always)]
    pub fn invoke_with_remaining_accounts(
        &self,
        remaining_accounts: &[(&'b solana_program::account_info::AccountInfo<'a>, bool, bool)],
    ) -> solana_program::entrypoint::ProgramResult {
        self.invoke_signed_with_remaining_accounts(&[], remaining_accounts)
    }
    #[inline(always)]
    pub fn invoke_signed(
        &self,
        signers_seeds: &[&[&[u8]]],
    ) -> solana_program::entrypoint::ProgramResult {
        self.invoke_signed_with_remaining_accounts(signers_seeds, &[])
    }
    #[allow(clippy::clone_on_copy)]
    #[allow(clippy::vec_init_then_push)]
    pub fn invoke_signed_with_remaining_accounts(
        &self,
        signers_seeds: &[&[&[u8]]],
        remaining_accounts: &[(&'b solana_program::account_info::AccountInfo<'a>, bool, bool)],
    ) -> solana_program::entrypoint::ProgramResult {
        let mut accounts = Vec::with_capacity(3 + remaining_accounts.len());
        accounts
            .push(solana_program::instruction::AccountMeta::new_readonly(*self.config.key, false));
        accounts.push(solana_program::instruction::AccountMeta::new(*self.currency.key, false));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            *self.authority.key,
            false,
        ));
        remaining_accounts.iter().for_each(|remaining_account| {
            accounts.push(solana_program::instruction::AccountMeta {
                pubkey: *remaining_account.0.key,
                is_signer: remaining_account.1,
                is_writable: remaining_account.2,
            })
        });
        let mut data = UpdateCurrencyV1InstructionData::new().try_to_vec().unwrap();
        let mut args = self.__args.try_to_vec().unwrap();
        data.append(&mut args);

        let instruction = solana_program::instruction::Instruction {
            program_id: crate::OPTIMISTIC_ORACLE_ID,
            accounts,
            data,
        };
        let mut account_infos = Vec::with_capacity(3 + 1 + remaining_accounts.len());
        account_infos.push(self.__program.clone());
        account_infos.push(self.config.clone());
        account_infos.push(self.currency.clone());
        account_infos.push(self.authority.clone());
        remaining_accounts
            .iter()
            .for_each(|remaining_account| account_infos.push(remaining_account.0.clone()));

        if signers_seeds.is_empty() {
            solana_program::program::invoke(&instruction, &account_infos)
        } else {
            solana_program::program::invoke_signed(&instruction, &account_infos, signers_seeds)
        }
    }
}

/// Instruction builder for `UpdateCurrencyV1` via CPI.
///
/// ### Accounts:
///
///   0. `[]` config
///   1. `[writable]` currency
///   2. `[]` authority
#[derive(Clone, Debug)]
pub struct UpdateCurrencyV1CpiBuilder<'a, 'b> {
    instruction: Box<UpdateCurrencyV1CpiBuilderInstruction<'a, 'b>>,
}

impl<'a, 'b> UpdateCurrencyV1CpiBuilder<'a, 'b> {
    pub fn new(program: &'b solana_program::account_info::AccountInfo<'a>) -> Self {
        let instruction = Box::new(UpdateCurrencyV1CpiBuilderInstruction {
            __program: program,
            config: None,
            currency: None,
            authority: None,
            new_reward_range: None,
            new_bond_range: None,
            __remaining_accounts: Vec::new(),
        });
        Self { instruction }
    }
    /// Config
    #[inline(always)]
    pub fn config(
        &mut self,
        config: &'b solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.config = Some(config);
        self
    }
    /// Currency
    #[inline(always)]
    pub fn currency(
        &mut self,
        currency: &'b solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.currency = Some(currency);
        self
    }
    /// Oracle authority
    #[inline(always)]
    pub fn authority(
        &mut self,
        authority: &'b solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.authority = Some(authority);
        self
    }
    #[inline(always)]
    pub fn new_reward_range(&mut self, new_reward_range: Bounds) -> &mut Self {
        self.instruction.new_reward_range = Some(new_reward_range);
        self
    }
    #[inline(always)]
    pub fn new_bond_range(&mut self, new_bond_range: Bounds) -> &mut Self {
        self.instruction.new_bond_range = Some(new_bond_range);
        self
    }
    /// Add an additional account to the instruction.
    #[inline(always)]
    pub fn add_remaining_account(
        &mut self,
        account: &'b solana_program::account_info::AccountInfo<'a>,
        is_writable: bool,
        is_signer: bool,
    ) -> &mut Self {
        self.instruction.__remaining_accounts.push((account, is_writable, is_signer));
        self
    }
    /// Add additional accounts to the instruction.
    ///
    /// Each account is represented by a tuple of the `AccountInfo`, a `bool` indicating whether the account is writable or not,
    /// and a `bool` indicating whether the account is a signer or not.
    #[inline(always)]
    pub fn add_remaining_accounts(
        &mut self,
        accounts: &[(&'b solana_program::account_info::AccountInfo<'a>, bool, bool)],
    ) -> &mut Self {
        self.instruction.__remaining_accounts.extend_from_slice(accounts);
        self
    }
    #[inline(always)]
    pub fn invoke(&self) -> solana_program::entrypoint::ProgramResult {
        self.invoke_signed(&[])
    }
    #[allow(clippy::clone_on_copy)]
    #[allow(clippy::vec_init_then_push)]
    pub fn invoke_signed(
        &self,
        signers_seeds: &[&[&[u8]]],
    ) -> solana_program::entrypoint::ProgramResult {
        let args = UpdateCurrencyV1InstructionArgs {
            new_reward_range: self
                .instruction
                .new_reward_range
                .clone()
                .expect("new_reward_range is not set"),
            new_bond_range: self
                .instruction
                .new_bond_range
                .clone()
                .expect("new_bond_range is not set"),
        };
        let instruction = UpdateCurrencyV1Cpi {
            __program: self.instruction.__program,

            config: self.instruction.config.expect("config is not set"),

            currency: self.instruction.currency.expect("currency is not set"),

            authority: self.instruction.authority.expect("authority is not set"),
            __args: args,
        };
        instruction.invoke_signed_with_remaining_accounts(
            signers_seeds,
            &self.instruction.__remaining_accounts,
        )
    }
}

#[derive(Clone, Debug)]
struct UpdateCurrencyV1CpiBuilderInstruction<'a, 'b> {
    __program: &'b solana_program::account_info::AccountInfo<'a>,
    config: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    currency: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    authority: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    new_reward_range: Option<Bounds>,
    new_bond_range: Option<Bounds>,
    /// Additional instruction accounts `(AccountInfo, is_writable, is_signer)`.
    __remaining_accounts: Vec<(&'b solana_program::account_info::AccountInfo<'a>, bool, bool)>,
}

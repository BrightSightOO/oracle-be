//! This code was AUTOGENERATED using the kinobi library.
//! Please DO NOT EDIT THIS FILE, instead use visitors
//! to add features, then rerun kinobi to update it.
//!
//! <https://github.com/kinobi-so/kinobi>
//!

use num_derive::FromPrimitive;
use thiserror::Error;

#[derive(Clone, Debug, Eq, Error, FromPrimitive, PartialEq)]
pub enum OptimisticOracleError {
    /// 0 - Failed to deserialize account
    #[error("Failed to deserialize account")]
    DeserializationError = 0x0,
    /// 1 - Failed to serialize account
    #[error("Failed to serialize account")]
    SerializationError = 0x1,
    /// 2 - Reward must be within valid bounds
    #[error("Reward must be within valid bounds")]
    RewardBounds = 0x2,
    /// 3 - Bond must be within valid bounds
    #[error("Bond must be within valid bounds")]
    BondBounds = 0x3,
    /// 4 - Value is not valid for the request
    #[error("Value is not valid for the request")]
    InvalidValue = 0x4,
    /// 5 - Invalid basis points value
    #[error("Invalid basis points value")]
    InvalidBps = 0x5,
    /// 6 - Disputer cannot be the same as the asserter
    #[error("Disputer cannot be the same as the asserter")]
    DisputerIsAsserter = 0x6,
    /// 7 - Request does not have an assertion
    #[error("Request does not have an assertion")]
    NotAsserted = 0x7,
    /// 8 - Request is not disputed
    #[error("Request is not disputed")]
    NotDisputed = 0x8,
    /// 9 - Request is not resolved
    #[error("Request is not resolved")]
    NotResolved = 0x9,
    /// 10 - Request already has an assertion
    #[error("Request already has an assertion")]
    AlreadyAsserted = 0xA,
    /// 11 - Assertion has already been disputed
    #[error("Assertion has already been disputed")]
    AlreadyDisputed = 0xB,
    /// 12 - Request has already been resolved
    #[error("Request has already been resolved")]
    AlreadyResolved = 0xC,
    /// 13 - Request is not accepting assertion yet
    #[error("Request is not accepting assertion yet")]
    AssertionTooEarly = 0xD,
    /// 14 - Dispute window has not expired
    #[error("Dispute window has not expired")]
    DisputeWindowNotExpired = 0xE,
    /// 15 - Dispute window has expired
    #[error("Dispute window has expired")]
    DisputeWindowExpired = 0xF,
    /// 16 - Voting window has not expired
    #[error("Voting window has not expired")]
    VotingWindowNotExpired = 0x10,
    /// 17 - Voting window has expired
    #[error("Voting window has expired")]
    VotingWindowExpired = 0x11,
    /// 18 - Arbitration window has not expired
    #[error("Arbitration window has not expired")]
    ArbitrationWindowNotExpired = 0x12,
    /// 19 - Oracle authority address does not match
    #[error("Oracle authority address does not match")]
    OracleAuthorityMismatch = 0x13,
    /// 20 - Config authority address does not match
    #[error("Config authority address does not match")]
    ConfigAuthorityMismatch = 0x14,
    /// 21 - Config address does not match
    #[error("Config address does not match")]
    ConfigMismatch = 0x15,
    /// 22 - Currency mint address does not match
    #[error("Currency mint address does not match")]
    CurrencyMintMismatch = 0x16,
    /// 23 - Bond mint address does not match
    #[error("Bond mint address does not match")]
    RewardMintMismatch = 0x17,
    /// 24 - Bond mint address does not match
    #[error("Bond mint address does not match")]
    BondMintMismatch = 0x18,
    /// 25 - Stake mint address does not match
    #[error("Stake mint address does not match")]
    StakeMintMismatch = 0x19,
    /// 26 - Stake delegate does not match voter
    #[error("Stake delegate does not match voter")]
    StakeVoterMismatch = 0x1A,
    /// 27 - Asserter address does not match
    #[error("Asserter address does not match")]
    AsserterMismatch = 0x1B,
    /// 28 - Disputer address does not match
    #[error("Disputer address does not match")]
    DisputerMismatch = 0x1C,
    /// 29 - Incorrect claimer
    #[error("Incorrect claimer")]
    IncorrectClaimer = 0x1D,
    /// 30 - Value voted for is not the resolved value
    #[error("Value voted for is not the resolved value")]
    IncorrectVote = 0x1E,
}

impl solana_program::program_error::PrintProgramError for OptimisticOracleError {
    fn print<E>(&self) {
        solana_program::msg!(&self.to_string());
    }
}

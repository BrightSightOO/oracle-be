//! This code was AUTOGENERATED using the kinobi library.
//! Please DO NOT EDIT THIS FILE, instead use visitors
//! to add features, then rerun kinobi to update it.
//!
//! [https://github.com/metaplex-foundation/kinobi]
//!

use num_derive::FromPrimitive;
use thiserror::Error;

#[derive(Clone, Debug, Eq, Error, FromPrimitive, PartialEq)]
pub enum OptimisticOracleError {
    /// 0 (0x0) - Program arithmetic overflowed
    #[error("Program arithmetic overflowed")]
    ArithmeticOverflow,
    /// 1 (0x1) - Insufficient bond
    #[error("Insufficient bond")]
    InsufficientBond,
    /// 2 (0x2) - Request does not have an assertion
    #[error("Request does not have an assertion")]
    NotAsserted,
    /// 3 (0x3) - Request already has an assertion
    #[error("Request already has an assertion")]
    AlreadyAsserted,
    /// 4 (0x4) - Assertion has already been disputed
    #[error("Assertion has already been disputed")]
    AlreadyDisputed,
    /// 5 (0x5) - Request has already been resolved
    #[error("Request has already been resolved")]
    AlreadyResolved,
    /// 6 (0x6) - Request is not accepting assertion yet
    #[error("Request is not accepting assertion yet")]
    AssertionTooEarly,
    /// 7 (0x7) - Dispute window has not expired
    #[error("Dispute window has not expired")]
    DisputeWindowOpen,
    /// 8 (0x8) - Dispute window has expired
    #[error("Dispute window has expired")]
    DisputeWindowExpired,
    /// 9 (0x9) - Value is not valid for the request
    #[error("Value is not valid for the request")]
    InvalidValue,
    /// 10 (0xA) - Disputed value falls within range of acceptable deviation for asserted value
    #[error("Disputed value falls within range of acceptable deviation for asserted value")]
    InvalidDispute,
    /// 11 (0xB) - Disputer cannot be the same as the asserter
    #[error("Disputer cannot be the same as the asserter")]
    DisputerIsAsserter,
    /// 12 (0xC) - Bond mint address does not match
    #[error("Bond mint address does not match")]
    BondMismatch,
}

impl solana_program::program_error::PrintProgramError for OptimisticOracleError {
    fn print<E>(&self) {
        solana_program::msg!(&self.to_string());
    }
}
